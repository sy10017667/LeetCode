public class Solution {
    public boolean containsNearbyDuplicate(int[] nums, int k) {
        for(int i = 0; i < nums.length; i++){
            for(int j = i + 1; j < nums.length; j++){
                if(nums[i] == nums[j] && j - i <= k){
                    return true;
                }
            }
        }
        return false;

    }
}双重循环 算法正确但是超时 n^2 复杂度。


HashMap, O(n)了
public class Solution {
    public boolean containsNearbyDuplicate(int[] nums, int k) {
        HashMap<Integer,Integer> map = new HashMap<>();
        for(int i = 0; i < nums.length; i++){
            if(map.containsKey(nums[i]) &&  i - map.get(nums[i]) <= k){ //注意是用i - mapget 因为i表示当前数字的位置，mapget是表示
                return true;                                            //这个数字上次出现的位置。
            }else{
                map.put(nums[i], i);
            }
        }
        return false;
    }
}
