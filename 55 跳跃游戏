TLE 解答：从前往后遍历数组，没到一个数组，把当前数组能到达的位置全部改成true 可到达的； 复杂度n^n
public class Solution {
    public boolean canJump(int[] nums) {
        boolean[] reachable = new boolean[nums.length];
        reachable[0] = true;
        for(int i = 0; i < nums.length; i++){
            if(reachable[i] == true){
                int end = Math.min(i + nums[i], nums.length-1);
                for(int j = i; j <= end; j++){
                    reachable[j] = true;
                }
            }
        System.out.println(Arrays.toString(reachable));
        }
        return reachable[nums.length-1];
    }
}


O(n)的解法来啦！！！！
public class Solution {
    public boolean canJump(int[] nums) {
        int cover = 0;
        
        for (int i = 0; i < nums.length; i++){
            if (cover >= i) cover = Math.max(cover, i + nums[i]);
        }
        return cover >= nums.length -1;
    }
}
/*[2,3,1,1,4] 5
i  0 1
c          0
8/
