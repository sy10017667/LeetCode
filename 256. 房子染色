public class Solution {
    public int minCost(int[][] matrix) {
        if(matrix == null || matrix.length == 0) return 0;
        int[][] dp = new int[matrix.length][3];
        dp[0][0] = matrix[0][0];
        dp[0][1] = matrix[0][1];
        dp[0][2] = matrix[0][2];
        for(int i = 1; i < matrix.length; i++){
            dp[i][0] = Math.min(dp[i - 1][1], dp[i - 1][2]) + matrix[i][0];
            dp[i][1] = Math.min(dp[i - 1][0], dp[i - 1][2]) + matrix[i][1];
            dp[i][2] = Math.min(dp[i - 1][0], dp[i - 1][1]) + matrix[i][2];
        }
        if(dp[matrix.length - 1][0] < Math.min(dp[matrix.length - 1][1], dp[matrix.length - 1][2])){
            return dp[matrix.length - 1][0];
        }
        
        return  Math.min(dp[matrix.length - 1][1], dp[matrix.length - 1][2]);
    }
}
/*
red   1 3 2
blue  2 2 1
green 3 1 3 
*/
我好喜欢DP
