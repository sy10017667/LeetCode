[1,   3,  5,  7],
[10, 11, 16, 20],
[23, 30, 34, 50]

[1,   3,  5,  7][10, 11, 16, 20][23, 30, 34, 50]
就是和一维度的差不多，把它想象成一维的，然后通过除法和取余 计算left 和right 所对应的值在第几个数组里的第几个值
比如说
l = 0 r = 3 * 4 -1 = 11
mid = 5 5是第二个数组里的第1个值，平铺开就好想象多了 所以就是matrix[5/4][5%1]
不过我最后的哪个判断语句长的我自己都惊艳到了。

public class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        if (matrix.length == 0 || matrix[0].length == 0) return false;
        int l = 0;
        int r = matrix.length * matrix[0].length - 1;
        while (l + 1 < r){
            int mid = l + (r - l) / 2;
            int n = mid / matrix[0].length;
            int m = mid % matrix[0].length;
            if (matrix[n][m] == target){
                return true;
            }else if (matrix[n][m] < target){
                l = mid;
            }else{
                r = mid;
            }
        }
        if (matrix[l / matrix[0].length][l % matrix[0].length] == target || matrix[r / matrix[0].length][r % matrix[0].length] == target) return true;
        return false;
    }
}
