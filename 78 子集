public List<List<Integer>> subsets(int[] nums) {  //返回二维数组
    List<List<Integer>> list = new ArrayList<>(); //建造二维数组
    Arrays.sort(nums);					//  对输入排序
    backtrack(list, new ArrayList<>(), nums, 0);  // 调用递归函数，4个参数，第一个是 最终要返回的二维数组，第二个是每次需要添加到最终结果的新数组
    
    第三个是输入，第四个0不知道是干嘛的。
    return list;						 // 主函数返回结果	
}

1 private void backtrack(List<List<Integer>> list , List<Integer> tempList, int [] nums, int start){ 4个输入分别是，最终返回的二维数组，

2    list.add(new ArrayList<>(tempList));  //   把那个临时的tempList 加入到最终结果中
3    for(int i = start; i < nums.length; i++){  // 从start 开始，遍历原输入数组
4        tempList.add(nums[i]);                把数组当前的值加入临时数组中
5        backtrack(list, tempList, nums, i + 1);  //递归调用 // 从第i加1开始
6        tempList.remove(tempList.size() - 1); // 把 临时数组中的最后一项删除掉，不知道为什么么
    }
}

来跑一个case啊[2,1,3]新建一个二维数组 List = [ [] ],对array进行排序，[1,2,3] 调用递归函数

1. List = [[]], tempList = [], nums = [1,2,3], start = 0
2. List = [[]]
i = 0,
4. tempList = [1]
    1.1. List = [[]], tempList = [1], nums = [1,2,3], start = 1
    1.2. List = [[1]], tempList = [1], nums = [1,2,3], start = 1
    1.3 i= 1
    1.4 tempList = [1,2]
        2.1 List = [[1]], tempList = [1], nums = [1,2,3], start = 1
        
 下面是正确的
 SUBSET;
规定一个数组，返回所有子集


public List<List<Integer>> subsets(int[] nums) {  //返回二维数组
    List<List<Integer>> list = new ArrayList<>(); //建造二维数组
    Arrays.sort(nums);					//  对输入排序
    backtrack(list, new ArrayList<>(), nums, 0);  // 调用递归函数，4个参数，第一个是 最终要返回的二维数组，第二个是每次需要添加到最终结果的新数组
    
    第三个是输入，第四个0不知道是干嘛的。
    return list;						 // 主函数返回结果	
}

1 private void backtrack(List<List<Integer>> list , List<Integer> tempList, int [] nums, int start){ 4个输入分别是，最终返回的二维数组，[]  [1,2]
2    list.add(new ArrayList<>(tempList));  //   把那个临时的tempList 加入到list
3    for(int i = start; i < nums.length; i++){  // 从start 开始，遍历原输入数组
4        tempList.add(nums[i]);                把数组当前的值加入临时数组中
5        backtrack(list, tempList, nums, i + 1);  //递归调用 // 从第i加1开始
6        tempList.remove(tempList.size() - 1); // 把 临时数组中的最后一项删除掉，不知道为什么么 // Backtrack. 
    }
} 
Nums = [1,2,3]

List = []
temp = []
Start = 0


1.1 list = [] temp = [] start = 0
1.2 list = [[]]     
1.3 i = 0  nums[i] = 1
1.4 temp = [1]
1.5 = 2.1 list = [[]] temp = [1] start = 1 
	2.2 list = [[],[1]]
	2.3 i = 1 nums[i] = 2
	2.4 temp = [1,2]
	2.5 = 3.1 list = [[],[1]] temp = [1,2] start = 2
		3.2 list = [[],[1],[1,2]]
3.3 i = 2 nums[2] = 3
3.4 temp = [1,2,3]
3.5 = 4.1 list = [[],[1],[1,2]] temp = [1,2,3] start = 3
	4.2 list = [[],[1],[1,2],[1,2,3]]
	4.3  cannnot step into for loop.
3.6 temp = [1,2] i++ i = 3
3.3.2 i = 3 cannot stp into for loop.
	2.6 temp = [1]  i++ i = 2
	2.3.2 i = 2 nums[i] =3 // 
	2.4.2 temp = [1,3]
2.5.2 = 3.1.2 list = [[],[1],[1,2],[1,2,3]] temp = [1,3] start = 3
	  3.2.2 list = [[],[1],[1,2],[1,2,3],[1,3]]
	  3.3.2 3 cannot step into for loop
2.6.2 temp = [1] i++ = 3
2.3.3 3 cannot step into for loop
1.6 temp = [] i++ i = 1
1.3.2 i = 1 nums[i] = 2
1.4.2 temp = [2]
1.5.2 = 2.1.3  list = [[],[1],[1,2],[1,2,3],[1,3]] temp = [2] start = 2
	  2.2.3 list = [[],[1],[1,2],[1,2,3],[1,3],[2]]
	  2.3.3 i = 2 nums[i] = 3
	  2.4.3 temp = [2,3]
	  2.5.3 = 3.1.3 list = [[],[1],[1,2],[1,2,3],[1,3],[2]] temp = [2,3] start = 3
	  	    3.2.3 list = [[],[1],[1,2],[1,2,3],[1,3],[2],[2,3]] 
	    3.3.3 i= 3 cannot step into for loop
  2.6.3 temp = [2] i++ = 3
  2.3.4 i = 3 cannot step into for loop
1.6.2  temp = [] i ++ = 2
1.3.3 i = 2 nums[i] = 3
1.4.3  temp = [3]
1.5.3 = 2.1.4 [[],[1],[1,2],[1,2,3],[1,3],[2],[2,3]] temp = [3] start = 3
	  2.2.4 list =[[],[1],[1,2],[1,2,3],[1,3],[2],[2,3],[3]]
  2.3.4 i = 3 cannot step into for loop 
1.6.3 temp = [] i++ = 3
1.3.4 i = 3 cannot step into for loop

list =[[],[1],[1,2],[1,2,3],[1,3],[2],[2,3],[3]]
