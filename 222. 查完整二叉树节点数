超时解：宽度优先搜索
public class Solution {
    public int countNodes(TreeNode root) {
        int res = 0;
        if (root == null) return res;
        
        Queue<TreeNode> q = new LinkedList<TreeNode>();
        q.offer(root);
        
        while (!q.isEmpty()) {
            int size = q.size();
            for (int i = 0; i < size; i++) {
                TreeNode head = q.poll();
                res++;
                if (head.left != null) q.offer(head.left);
                if (head.right != null) q.offer(head.right);
            }
        }
        return res;
    }
}
public class Solution {
    public int countNodes(TreeNode root) {
        if (root == null) return 0;
        return countNodes(root.left) + countNodes(root.right) + 1;
    }
}
深度优先也超时
public class Solution {
    public int countNodes(TreeNode root) {
        if (root == null) return 0;
        return countNodes(root.left) + countNodes(root.right) + 1;
    }
}
所以这题必须得用完整树的属性 如果左右深度相同，这个子树的节点数等于 2^深度 - 1
public class Solution {
    public int countNodes(TreeNode root) {
        if (root == null) return 0;
        int l = countLeft(root);
        int r = countRight(root);
        
        if (l == r){
            return (1<<l) - 1;
        }
        return countNodes(root.left) + countNodes(root.right) + 1;
    }
    
    private int countLeft(TreeNode root){
        int count = 1;
        while(root.left != null){
            count++;
            root = root.left;
        }
        return count;
    }
    private int countRight(TreeNode root){
        int count = 1;
        while(root.right != null){
            count++;
            root = root.right;
        }
        return count;
    }
}
