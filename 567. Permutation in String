TLE解：
public class Solution {
    public boolean checkInclusion(String s1, String s2) {
        int n1 = s1.length();
        int n2 = s2.length();
        if (n1 > n2) return false;
        Map<Character, Integer> map = new HashMap<>();
        for (char c : s1.toCharArray()) {
            map.put(c, map.getOrDefault(c, 0) + 1);
        }
        
        for (int i = 0; i <= n2 - n1; i++) {
            String s3 = s2.substring(i, i + n1);
            if (isPermutation(s3, new HashMap<>(map))) return true;
        }
        return false;
    }
    private boolean isPermutation(String s3, Map<Character, Integer> map) {
        for (char c : s3.toCharArray()) {
            if (map.containsKey(c)) {
                map.put(c, map.get(c) - 1);
                if (map.get(c) == 0) {
                    map.remove(c);
                }
            }else {
                return false;
            }
        }
        return map.size() == 0;
    }
}
