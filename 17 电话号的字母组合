public class Solution {
    public List<String> letterCombinations(String digits) {
        List<String> res = new ArrayList<String>();
        if(digits == null || digits.length() == 0) return res;
        HashMap<Character,char[]> map = new HashMap<Character,char[]>();
        map.put('0',new char[] {});
        map.put('1',new char[] {});
        map.put('2',new char[] {'a','b','c'});
        map.put('3',new char[] {'d','e','f'});
        map.put('4',new char[] {'g','h','i'});
        map.put('5',new char[] {'j','k','l'});
        map.put('6',new char[] {'m','n','o'});
        map.put('7',new char[] {'p','q','r','s'});
        map.put('8',new char[] {'t','u','v'});
        map.put('9',new char[] {'w','x','y','z'});
        StringBuilder temp = new StringBuilder();
        backtrack(digits, map, res, temp);
        return res;
        
    }
    private static void backtrack(String digits, HashMap<Character,char[]> map,List<String> res, StringBuilder temp){
        if(temp.length() == digits.length()){
            res.add(temp.toString());
            return;//?
        }
        for(char c: map.get(digits.charAt(temp.length()))){
            temp.append(c);
            backtrack(digits,map,res,temp);
            temp.deleteCharAt(temp.length()-1);
        }
    }
}
