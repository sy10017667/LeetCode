Given an array of n positive integers and a positive integer s, find the minimal length of a 
contiguous subarray of which the sum ≥ s. If there isn't one, return 0 instead.

For example, given the array [2,3,1,2,4,3] and s = 7,
the subarray [4,3] has the minimal length under the problem constraint.


认真看题有多重要啊，我还以为subarray的和为7。 我还以为没有返回 -1。算法基本就是双指针，比target小就继续往前加。比target大就减去前面的，
看看最小的size是多少
public class Solution {
    public int minSubArrayLen(int s, int[] nums) {
        int i = 0, j = 0;
        int sum = 0;
        int res = Integer.MAX_VALUE;
        
        for (i = 0; i < nums.length; i++){
            while (sum < s && j < nums.length) sum += nums[j++];
            if (sum >= s) res = Math.min(res, j - i);
            sum -= nums[i];
        }
        return res == Integer.MAX_VALUE? 0: res;

    }
}
/*
[2,3,1,2,4,3] s = 7
 i     j
i = 1, j = 4, sum = 0, res = 3
124
*/
