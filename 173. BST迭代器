public class BSTIterator {

    private Stack<TreeNode> stack = new Stack<TreeNode>();
    public BSTIterator(TreeNode root) {
        while (root != null) {
            stack.push(root);
            root = root.left;
        }
    }

    public boolean hasNext() {
        return !stack.isEmpty();
    }

    public int next() {
        TreeNode node = stack.pop();
        int res = node.val
        if (node.right != null) {
            node = node.right;
            while (node != null) {
                stack.push(node);
                node = node.left;
            }
            
        }
        return res;
    }
}就最后一个函数不太好理解，大概的意思是从栈里弹出最小值以后，如果该最小值有右子节点，则把右子节点入栈，如果右子节点右左子节点，则左子节点不断入栈。
