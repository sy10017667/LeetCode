public class Solution {
    public List<List<String>> partition(String s) {
        List<List<String>> res = new ArrayList<>();
        List<String> temp = new ArrayList<>();
        backtrack(s, res, temp, 0);
        return res;
    }
    private static void backtrack(String s, List<List<String>> res, List<String> temp, int i){
        if(i == s.length()){
            res.add(new ArrayList<>(temp));
            return;
        }
        for(int j = i; j<s.length(); j++){
            if(isPalindrome(s, i, j)){
                temp.add(s.substring(i,j+1));
                backtrack(s, res, temp, j+1);
                temp.remove(temp.size() - 1);
            }
        }
    }
    private static boolean isPalindrome(String s, int i, int j){
        while(i < j){
            if(s.charAt(i++) != s.charAt(j--)) return false;
        }
        return true;
    }
}
手推过程：

S = “aab” 
1 S = “aab” res = [] temp = [] i =0
2  0!=3
5 j=0 1 2
6 true 00 01 02
7 temp = “a”
8 =   2.1 res = [] temp = “a” i=1
	2.2 1!=3
	2.5 j=1
	2.6 11 ture
	2.7 temp = [“a”,”a”]
	2.8 = 3.1 res = [] temp = [‘a’,’a’] i = 2
3.2 2!=3
3.5 j = 2
3.6 22 true
3.7 temp = [‘a’,’a’,’b’]
3.8 = 4.1 res = [] temp = [‘a’,’a’,’b’] i = 3
	4.2 3=3
	4.3 Res = [[‘a’,’a’,’b’]] temp = [‘a’,’a’,’b’]
4.4 return
3.9 temp = [‘a’,’a’] j++= 3
3.5.2 j = 3 will not for loop
	2.9 temp = [‘a’] j++ = 2
	2.5.2 j = 2
	2.6.2 false j++ = 3
	2.5.3 j = 3 will not for loop
1.9 temp = [] j++ = 1
1.5.2 j = 1
1.6.2 01 true

1 private void dfs(String s, List<List<String>> res, List<String> temp, int i) {  
2        if(i == s.length()) {  
3            res.add(new ArrayList<>(temp));  
4            return;  }
5        for(int j = i; j < s.length(); j++) {  
6            if(isPalindrome(s, i, j)) {  //如果[i,j]中字符不构成回文，那么不进行下一次递归，直接进入下一次循环判断[i,j+1]  
7                temp.add(s.substring(i,j+1));  
8                dfs(s, res, temp, j+1);  //如果[i,j]中字符构成回文，那么进行下一次递归，判断j+1之后字符是否构成回文  
9                temp.remove(temp.size()-1);  
