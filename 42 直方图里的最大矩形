自己想出来的brute force，果然超时了。
最大长方形，一定是，以其中一个柱子的最大高度乘以N n为旁边连续的和它一样高或比他高的柱子的个数
所以我就对遍历每一个柱子，
[3,2,2,3,1]比如说第三个柱子， 2 它左面的两个都大于等于他，所以可以算进去，右面的一个大于它，所以可以算进去，所以以第三根柱子为基准的最大长方形的面积是8.
不过超时了，白搭。
public class Solution {
    public int largestRectangleArea(int[] nums) {
        //special case
        if(nums == null || nums.length == 0) return 0;
        //Initialization
        int[] dp = new int[nums.length];
        for(int i = 0; i < nums.length; i++) dp[i] = nums[i];
        
        for(int i = 0; i < nums.length; i++){
            // to right
            int j = i + 1;
            while(j < nums.length){
                if(nums[j] >= nums[i]){dp[i] += nums[i]; j++;}
                else break;
            }
            // to left
            int k = i - 1;
            while(k >= 0){
                if(nums[k] >= nums[i]){dp[i] += nums[i]; k--;}
                else break;
            }
        }
        
        //return maximum of dp
        Arrays.sort(dp);
        return dp[nums.length-1];
    }
}
用栈来模拟，遍历heights数组，如果大于栈顶元素，就push进去；否则，持续弹栈来计算从栈顶点到降序点的矩阵大小。然后将这一部分全部替换为降序点的值，即做到了整体依然是有序非降的。
整个过程中，即把所有的局部最大矩阵计算过了，又在宽度范围内保留了全部的场景。
举例，2，1，5，6，3的场景。
先加入一个0，方便最后可以全部弹栈出来。变成：2，1，5，6，3，0.
2进栈，1比栈顶小，对2进行出栈，area = 2；
2被替换为1进栈，1继续进栈，这是栈为1，1；
5，6都是非降的，继续进栈，栈为1，1，5，6；
遇到3，是一个降序点；开始弹栈，6出栈，对应area=61； 5出栈对应area=52；下一个1比3小，不需要弹栈。然后将5、6的弹栈后的空位压栈为3，这是栈为1，1，3，3，3；
下一步遇到0，开始依次出栈，得到area=31，32，33，14，1*5。
遍历结束。整个过程中max的area为10.

在整个过程中，将每一个点作为起点，到各个波峰最大的几个矩阵都计算过一次，即保证了每个点作为起点的最大矩阵可能性都试探过。

3. 代码
耗时：13ms

