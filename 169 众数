public class Solution {
    public int majorityElement(int[] nums) {
        Arrays.sort(nums);
        return nums[nums.length/2];
    }
}
因为题目说数组长度为n，存在众数出现的次数大于n/2
1.当输入为奇数时
[1,2,1] n = 3; n/2 =1; 大于n/2最少是2，所以排序后，[1,1,2] 或者[1,2,2] 中间的数一定是那个众数
2.当输入为偶数时
[1,2,1,3] n = 4 n/2 = 2我发现了一个能AC的bug程序！！
[1,1,2,3] 此时应该返回的是1，可是按照我算法返回的是index为2 的2！
所以正确的解法是：
Moore Voting
public class Solution {
    public int majorityElement(int[] nums) {
        int count = 0;
        int Majority = 0;
        for(int i: nums){
            if(count == 0){
                count++;
                Majority = i; 
            }else if(Majority == i){
                count++;
            }else{
                count--;
            }
        }
        return Majority;
    }
}设置一个众数，然后遍历数组，如果count等于0就设置下一个数为众数，因为真正的众数超过n/2 次所以最后一定会留下它。
时间O(n)空间O(1).
