public class Solution {
    public int searchInsert(int[] A, int target) {
        //SC
        if (A.length == 0 || A == null) return 0;
        int l = 0;
        int r = A.length - 1;
        while (l + 1 < r){
            int mid = l + (r - l) / 2;
            if(A[mid] == target){
                return mid;
            }else if(A[mid] < target){
                l = mid;
            }else{
                r = mid;
            }
        }
        if (A[l] >= target) return l;   // 想想 25  1 2 3 5 6 的情况
        else if (A[r] >= target) return r;
        return r + 1;
    }
}
/*
1 有目标值，返回位置 [1,3,5,6] 5 返回2
2 没有目标值，插入

方法1
2.1 找到第一个比它大的数，返回其位置
2.1.1 [1,3,5,6] 2 第一个比2大的数是3
2.1.2 [1,3,5,6] 7 没有比7大的数，所以放到最后
2.1.3 [1,3,5,6] 0 全都是比 0大的数，所以第一个比0大的数是1，放到数值为1索引为0的位置，可归类为2.1

方法2
2.2 或者最后一个比它小的数
2.2.1 [1,3,5,6] 2 返回1+1
2.2.2 [1,3,5,6] 7 返回3+1
2.2.3 [1,3,5,6] 0 没有比它小的数，返回0.
*/
