class MyQueue {
    Stack<Integer> stack = new Stack<Integer>();
    Stack<Integer> temp = new Stack<Integer>();
    // Push element x to the back of queue.
    public void push(int x) {
        if(stack.empty()){
            stack.push(x);
        }else{
            while(!stack.empty()){
                temp.push(stack.pop());
            }
            stack.push(x);
            while(!temp.empty()){
                stack.push(temp.pop());
            }
        }
    }

    // Removes the element from in front of queue.
    public void pop() {
        stack.pop();
    }

    // Get the front element.
    public int peek() {
        return stack.peek();
    }

    // Return whether the queue is empty.
    public boolean empty() {
        return stack.empty();
    }
}
队列 [1,2,3,4] 先出1。
Stack[4,3,2,1] 先出1， 就弄一个临时的想办法把每次入列的时候把它塞到债的最里面就可以了。这样pop 和peek的时候就一样了。
