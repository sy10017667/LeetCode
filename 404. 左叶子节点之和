迭代法


public class Solution {
    public int sumOfLeftLeaves(TreeNode root) {
        if (root == null) return 0;
        int res = 0;
        Stack<TreeNode> stack = new Stack<TreeNode>();
        stack.push(root);
        
        while (!stack.empty()) {
            TreeNode node = stack.pop();
            if (node.left != null){
                if (node.left.left == null && node.left.right == null){
                    res += node.left.val;
                }else{
                    stack.push(node.left);
                }
            }
            
            if (node.right != null){
                if (node.right.left != null || node.right.right != null){
                    stack.push(node.right);
                }
            }
        }
        return res;
    }
}

递归法：

public class Solution {
    public int sumOfLeftLeaves(TreeNode root) {
        return dfs(root, false);
    }

    private int dfs(TreeNode root, boolean isLeft){
        if (root == null) return 0;
        
        if (root.left == null && root.right == null && isLeft){
            return root.val;
        }
        
        return dfs(root.left, true) + dfs(root.right, false);
    }
}
